= アウトプットを始めよう

#@# テーマ的には、第三章のネタだし法につながるところではあります

本を書くことは実は大きなメリットがいくつもあります。わかりやすい例でいえば、技術書典で出した同人誌が出版社の目にとまって、商業誌を執筆する事例がいくつもありますが、そういうものに限りません。本章ではアウトプットというテーマで、色々とメリットを説明しつつ、アウトプットの練習方法について説明します。

== ブログだって立派なアウトプット

日々困ったことの解決方法をブログに書くのも立派なアウトプットです。筆者（@erukiti）は元々アウトプットが苦手だったのを克服する一環として技術系ブログを書き始めましたが、それらがたまりに溜まっていつの間にか技術同人誌を出すに至りました。ちょっとしたブログなら簡単じゃないですか。恥ずかしければ匿名アカウントでもなんでもいいのです。Qiita@<fn>{qiita}やMedium@<fn>{medium}やnote.mu@<fn>{note.mu}など、発表に適した場はいろいろとあります。前者は技術に強いコミュニティです（規約的に技術に即した記事以外は削除される可能性があります）。後者2つは技術系以外も多い総合サイトです。
//footnote[qiita][@<href>{https://qiita.com/trend}]
//footnote[medium][@<href>{https://medium.com/japan}]
//footnote[note.mu][@<href>{https://note.mu/}]

ブログを1本書けば「ブログを書いた」という実績がアンロックされます。おめでとうございます。実績がアンロックされる前とはきっと違うあなたになっているはずです。ブログを10本書けば「10本ブログを書いた」という実績です。最近のゲーム機では当たり前のように存在する実績システムです。これは別に架空の概念でもなんでもありません。ブログという形で1つの記事を書き上げるというのは、それを達成するだけで、自分に大きな力として返ってくるのです。

また、ブログ経由でスカウトメールが届くこともありますし、ライターを目指すなら手っ取り早い手段ではあります。イマドキの編集者は実際にnote.muやMediumをチェックして面白そうなものを書ける人を探しているのです。

== アウトプットで理解が深まる

人に教えると理解が進む、という経験をした人はそれなりに多いでしょう。試験勉強と同じです。ブログを書くためには、他の人にも通じる共通の言語・概念・ルールを用いて形にしないといけません。最低でも言語化できていなければブログを書けません。人に説明するために、おそらく普通よりも頑張って調べ物をすることもあるでしょう。これらの行程は理解を深める為にはとても有益なものなのです。

また、自分の書いた記事を未来の自分が参考にすることもあります。備忘録としても優秀です。

====[column] 書かないと始まらない

//quote{
作家の結城浩さんが語る「常に書け。現在の自分の最前線を書け」 - Togetterまとめ@<br>{}
@<href>{https://togetter.com/li/1172094}
//}

//quote{
そして思います。文章は、そのつど書かなきゃ駄目ということを。経験を積んでから、十分学んでから、時間ができてから書くのではない。断じて違う。そのつど書く。自分の不十分さをたっぷり自覚した状態で書く。そうでなければ、いつまでたっても書けやしない。
//}

//quote{
常に書け。現在の自分の最前線を書け。いまを逃せば、いまの自分は書けない。だから、いま、書くしかないのです。理解も不十分、経験も少ない、世の中もわからない、こんなこと書いたら恥ずかしい、批判がたくさん来るかも。という状態で書くしかない。いまを逃せば、チャンスはない。

//}

これはほんとにそうです。下手な時には下手なりに自分の血肉となる何かを残すというのは重要です。黒歴史を恐れる人もいますが、犯罪行為とかを除けば黒歴史なんて恥ずかしい（可能性がある）だけの取るに足らないものです。当時の自分の切り口を振り返るというのは、じつは後になって大きな資産になるものなのです。

書くことに恥ずかしいとか遠慮とかそういうものがある人はなんとかその呪縛を壊せばいいのです。よほど個人情報でもさらさない限りMediumとかQiitaでIDを取って記事を書くだけなら、恥ずかしさは少しでも軽減するのではないでしょうか？

====[/column]

== インプット・コンピュート・アウトプットサイクルを刻む

コンピュータの仕組みは「入力（インプット）」「演算（コンピュート）」「出力（アウトプット）」です。人間も同様ではないでしょうか？情報を入力して、その情報を処理（咀嚼）して、それらを文章やソースコード、あるいは他の作品の形でアウトプットするのです。

=== バランスが偏ると罠にハマりやすい

入力に偏ると脳がパンクしてしまいませんか？十分に咀嚼しないと自分のものにはなりません。入力が足りずに頑張ろうとすると、狭い知識で無理矢理ひねり出すような縛りプレイになってしまうこともあります。アウトプットは、入力と咀嚼の両方がそろってはじめて出せるものです。

入力と咀嚼が足りているとしてアウトプットを怠るとどうなるか？それは偏ったガラパゴス状態になりがちということです。せっかく咀嚼して自分の血肉にした技術でも、アウトプットしなければいつかは腐らせてしまいます。

つまり、これらのサイクルはどれも重要なものなのです。

=== 大きなジャンプより小さな一歩

たとえばソースコードを変更したいとします。このとき、一気に大きな変更を施すと大変なことになりがちです。変更点の把握、それが正しいかどうかの確認、大人数開発であればコミュニケーションコストも馬鹿にできません。プロモーションなんかも絡んでくるでしょう。

よくプログラミング言語には大きなジャンプをすることがあります。Ruby1.8から2.0, Python2から3, JavaScriptの言語仕様であるES5からECMAScript2015やPHPの5.2から5.3などです。この大きなジャンプの特徴として、互換性の破壊、開発期間が長引く、ユーザーの移行が手間取るなどの問題があります。時間をかければかけるほど大事になりやすいのです。

個人の作業でもそうです。時間をめいっぱい掛けて大事にするより、小さな一歩を刻んでいく方が自分にとっても理解しやすく、心のハードルも低いものです。

また大抵のケースでは、1つのジャンボなサイクルをまわすよりは、小さなサイクルをたくさん回す方が得られる経験値は段違いに多いものです。未完の大作よりはちゃんと完成したものを少しずつ作っていく方が力を得やすいのです。分割統治法とか二分探索とか、エンジニアなら好きな言葉だったりしませんか？

====[column] 脳みそのはなし：@erukiti

「やる気」ってどういうものでしょうか？何もやる気が起こらない。よくある現象です。でもじつは脳の構造上、やる気というのは「やりはじめた時」に出やすいものなのです。まずは何かしら手を付けましょう。エディタを立ち上げる。少しでも書き始める。書きたい記事に必要な要素をリストアップする、などなど何でもいいからはじめましょう。始めないと始まりません。やらないとやる気は出ません。少しでも物理的な行動を始めてから考えればいいのです。

始めるときにお勧めのライフハックがあります。まずプライベートなノート、紙でも電子データでもいいので、そこに自分の考えを話し言葉で書き出してみましょう。ネタは何でもいいです。技術のこと、設計論、人とのコミュニケーションのやりかた、あるいはこれは恥ずかしい、人に見せられない、それらの理由、思ってること、感じたこと、なんでもいいので言葉として書き出してみてください。それだけで少し位心が楽になるものですが、いったん書く事で脳内に溜まったままのものに決着を付けやすくなります。

そうしたら、次はどうやって自分の得た技術を本にするかをノートに書き出しながら考えてみてください。きっと一歩を踏めるはずです。

====[/column]

== 技術同人誌はコスパのよいアウトプット方法である

一番見返りの大きなアウトプットはおそらく商業で本をガッツリ書くことでしょう。編集者の方に色々手伝ってもらいながら一冊の本を書き上げるというのは、得られる経験や知名度、収入などさまざまなメリットがあります。ただ、当然のことながら敷居の高いものではあります。

そこで同人誌です。技術同人誌は誰でも作って誰でも頒布できます。

技術書典にサークルとして参加するのは当落があるので必ずしもサークルとして参加できるとはかぎりませんが、いざとなれば友人知人のサークルに委託するという手もありますし、boothのようなオンライン販売サイト、ComicZINのような委託可能な書店に委託もできます。

====[column] 初めて同人誌を書くには：親方

ネタはある。書く気もある。でもサークル申し込みしていない。さあどうしよう。

そんなときは、友人知人を捕まえて、委託させてくれ、寄稿させてくれ、と言ってみましょう。うちのサークルで言えば、3回ほど寄稿で執筆してくれた人は、今は自分のサークルを持って活動しています。サークル参加している知人がいなければ、ちょっとハードルは上がりますが、もくもく会等で委託・寄稿させてくれる人を探すのもアリです。

あるいは、いっそのこと、コミケや技術書典に申し込みをするのが最短です。技術書典は、全サークルの2割が初参加（本を書くのが初めて）だそうです。200サークルのうち実に40サークルです。さあ！さあ！さあ！

====[/column]

== モチベーション

アウトプットのモチベーション、筆者（@erukiti）としては「欲望」が大きなものだと思っています。JavaScriptの同人誌を出していますが、ウェブ上での情報汚染がひどかったので、自分なりにまとめなおしたかったからです。技術書典2で出したModern JavaScriptという本では、ES5という古びた技術が未だにウェブ上では散見される現状に我慢できなかったのです。技術書典3で出した簡単JavaScript AST入門という本は、JavaScriptのもつポテンシャルを高める技術について、どこにも本が出ていなかったことと、ウェブ上でも情報が限られていたからです。

====[column] 真人間のアドバイスは無視していい

創作、執筆、そういったものにおいて、足を引っ張るのは（自称）真人間のアドバイスです。執筆にかぎりません。「そんなの金にならない」「まっとうな社会人なら」「年甲斐も無く」「車輪の再発明をするやつは馬鹿だ」「○○なんて馬鹿のつかうもの」など色々な言葉がありますが、そういうたぐいの言葉はほぼ100%無責任なもので、たんに経験や感情を押しつけるだけのものです。

あなたが書きたいと思った欲望（モチベーション）を止める人の言葉は、あなたの創作意欲をつぶそうとする有害なものです。

批判なんかもそうです。現代ではSNSによって批判にあふれかえっています。本を書いたり記事を書いて批判を耳にすることもあるでしょう。そういったものには有用なものもありますが、批判に支配されてはいけません。批判をどう受け止めるのかはあなたの選択です。大抵の場合はスルーすればいいでしょう。どうしても気になる批判であれば、自分の中で咀嚼するか、マインドフルネスするか、まぁ何らかの対処をしましょう。

あなたが生み出すものを邪魔する権利は他人にはありません。あなたが生み出すはずだったものについて責任を取ってくれる人はこの世に誰一人いません。

====[/column]

== 本を書きたくなったら最初に目指すこと

それは目次の作成です。ある編集者@<fn>{@kurakake}の持論としては「目次が完成したら本の半分以上できたようなものだ」というものです。特に理系の論文の組み立て方やロジカルライティングに通じるものですが、大きなテーマがあって、それを伝えるためにはこれを伝えて、というのを目次という形にします。この目次がしっかりした構成であれば、後はもう中身を書くだけなのです。

//footnote[@kurakake][@<href>{https://twitter.com/kurakake}]

目次が出来たら誰かに見せてみましょう。一番いいのは技術書執筆系の勉強会に参加して、そこらへんにいる編集者を捕まえて「こういう本書きたいと思って目次書いてみたんですがどうでしょう？」と聞いてみることです。アドバイスしたがりの人が多いのできっと本に繋がる有益なアドバイスを頂けるとおもいます。
